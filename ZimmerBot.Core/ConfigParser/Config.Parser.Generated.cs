// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  JORN-PC
// DateTime: 22-03-2016 21:56:48
// UserName: Jorn
// Input file <ConfigParser\Config.Language.grammar.y - 22-03-2016 21:56:47>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ZimmerBot.Core.WordRegex;
using ZimmerBot.Core.Expressions;

namespace ZimmerBot.Core.ConfigParser
{
internal enum Token {error=2,EOF=3,T_AGGREGATE=4,T_CALL=5,T_GT=6,
    T_COLON=7,T_EXCL=8,T_DOT=9,T_IMPLIES=10,T_COMMA=11,T_PIPE=12,
    T_LPAR=13,T_RPAR=14,T_STAR=15,T_PLUS=16,T_OUTPUT=17,T_WORD=18,
    T_STRING=19};

internal partial struct ValueType
{ 
  public OutputStatement output;
  public List<OutputStatement> outputList;
  public WRegex regex;
  public Expression expr;
  public List<Expression> exprList;
  public List<string> stringList;
  public string s;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class ConfigParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[36];
  private static State[] states = new State[49];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "statementSeq", "statement", "configuration", "rule", 
      "wordSeq", "input", "outputSeq", "inputSeq", "inputPattern", "inputPatternSeq", 
      "output", "outputPattern", "call", "Anon@1", "exprReference", "exprSeq", 
      "expr", "exprIdentifier", };

  static ConfigParser() {
    states[0] = new State(-4,new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{8,6,6,38,3,-2},new int[]{-4,4,-5,5,-6,14,-8,15});
    states[4] = new State(-3);
    states[5] = new State(-5);
    states[6] = new State(new int[]{4,7});
    states[7] = new State(new int[]{18,13},new int[]{-7,8});
    states[8] = new State(new int[]{10,9,11,11});
    states[9] = new State(new int[]{18,13},new int[]{-7,10});
    states[10] = new State(new int[]{11,11,8,-7,6,-7,3,-7});
    states[11] = new State(new int[]{18,12});
    states[12] = new State(-34);
    states[13] = new State(-35);
    states[14] = new State(-6);
    states[15] = new State(-21,new int[]{-9,16});
    states[16] = new State(new int[]{7,19,8,23,6,-8,3,-8},new int[]{-13,17,-14,18,-15,22});
    states[17] = new State(-20);
    states[18] = new State(-22);
    states[19] = new State(-24,new int[]{-16,20});
    states[20] = new State(new int[]{17,21});
    states[21] = new State(-25);
    states[22] = new State(-23);
    states[23] = new State(new int[]{5,24});
    states[24] = new State(new int[]{18,35},new int[]{-17,25});
    states[25] = new State(new int[]{13,26,9,33});
    states[26] = new State(new int[]{18,35,19,36},new int[]{-18,27,-19,37,-20,31,-17,32});
    states[27] = new State(new int[]{14,28,11,29});
    states[28] = new State(-26);
    states[29] = new State(new int[]{18,35,19,36},new int[]{-19,30,-20,31,-17,32});
    states[30] = new State(-27);
    states[31] = new State(-29);
    states[32] = new State(new int[]{9,33,14,-31,11,-31});
    states[33] = new State(new int[]{18,34});
    states[34] = new State(-32);
    states[35] = new State(-33);
    states[36] = new State(-30);
    states[37] = new State(-28);
    states[38] = new State(new int[]{13,43,18,46,15,47,16,48},new int[]{-11,39});
    states[39] = new State(new int[]{12,41,13,43,18,46,15,47,16,48,7,-11,8,-11,6,-11,3,-11},new int[]{-11,40});
    states[40] = new State(new int[]{12,41,13,43,18,46,15,47,16,48,7,-14,8,-14,6,-14,3,-14,14,-14},new int[]{-11,40});
    states[41] = new State(new int[]{13,43,18,46,15,47,16,48},new int[]{-11,42});
    states[42] = new State(new int[]{12,41,13,43,18,46,15,47,16,48,7,-15,8,-15,6,-15,3,-15,14,-15},new int[]{-11,40});
    states[43] = new State(new int[]{13,43,18,46,15,47,16,48},new int[]{-11,44});
    states[44] = new State(new int[]{14,45,12,41,13,43,18,46,15,47,16,48},new int[]{-11,40});
    states[45] = new State(-16);
    states[46] = new State(-17);
    states[47] = new State(-18);
    states[48] = new State(-19);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-3,-4});
    rules[4] = new Rule(-3, new int[]{});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-6});
    rules[7] = new Rule(-5, new int[]{8,4,-7,10,-7});
    rules[8] = new Rule(-6, new int[]{-8,-9});
    rules[9] = new Rule(-10, new int[]{-10,-8});
    rules[10] = new Rule(-10, new int[]{});
    rules[11] = new Rule(-8, new int[]{6,-11});
    rules[12] = new Rule(-12, new int[]{-12,-11});
    rules[13] = new Rule(-12, new int[]{});
    rules[14] = new Rule(-11, new int[]{-11,-11});
    rules[15] = new Rule(-11, new int[]{-11,12,-11});
    rules[16] = new Rule(-11, new int[]{13,-11,14});
    rules[17] = new Rule(-11, new int[]{18});
    rules[18] = new Rule(-11, new int[]{15});
    rules[19] = new Rule(-11, new int[]{16});
    rules[20] = new Rule(-9, new int[]{-9,-13});
    rules[21] = new Rule(-9, new int[]{});
    rules[22] = new Rule(-13, new int[]{-14});
    rules[23] = new Rule(-13, new int[]{-15});
    rules[24] = new Rule(-16, new int[]{});
    rules[25] = new Rule(-14, new int[]{7,-16,17});
    rules[26] = new Rule(-15, new int[]{8,5,-17,13,-18,14});
    rules[27] = new Rule(-18, new int[]{-18,11,-19});
    rules[28] = new Rule(-18, new int[]{-19});
    rules[29] = new Rule(-19, new int[]{-20});
    rules[30] = new Rule(-19, new int[]{19});
    rules[31] = new Rule(-20, new int[]{-17});
    rules[32] = new Rule(-17, new int[]{-17,9,18});
    rules[33] = new Rule(-17, new int[]{18});
    rules[34] = new Rule(-7, new int[]{-7,11,18});
    rules[35] = new Rule(-7, new int[]{18});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 7: // configuration -> T_EXCL, T_AGGREGATE, wordSeq, T_IMPLIES, wordSeq
{ RegisterAggregates(ValueStack[ValueStack.Depth-3].stringList, ValueStack[ValueStack.Depth-1].stringList); }
        break;
      case 8: // rule -> input, outputSeq
{ 
      Knowledge.Rule r = Domain.AddRule(ValueStack[ValueStack.Depth-2].regex);
      if (ValueStack[ValueStack.Depth-1].stringList != null)
        r.WithResponses(ValueStack[ValueStack.Depth-1].stringList);
      if (ValueStack[ValueStack.Depth-1].outputList != null)
        r.WithOutputStatements(ValueStack[ValueStack.Depth-1].outputList);
    }
        break;
      case 11: // input -> T_GT, inputPattern
{ CurrentSemanticValue.regex = ValueStack[ValueStack.Depth-1].regex; }
        break;
      case 12: // inputPatternSeq -> inputPatternSeq, inputPattern
{ ((SequenceWRegex)ValueStack[ValueStack.Depth-2].regex).Add(ValueStack[ValueStack.Depth-1].regex); }
        break;
      case 13: // inputPatternSeq -> /* empty */
{ CurrentSemanticValue.regex = new SequenceWRegex(); }
        break;
      case 14: // inputPattern -> inputPattern, inputPattern
{ CurrentSemanticValue.regex = CombineSequence(ValueStack[ValueStack.Depth-2].regex, ValueStack[ValueStack.Depth-1].regex); }
        break;
      case 15: // inputPattern -> inputPattern, T_PIPE, inputPattern
{ CurrentSemanticValue.regex = new ChoiceWRegex(ValueStack[ValueStack.Depth-3].regex, ValueStack[ValueStack.Depth-1].regex); }
        break;
      case 16: // inputPattern -> T_LPAR, inputPattern, T_RPAR
{ CurrentSemanticValue.regex = new GroupWRegex(ValueStack[ValueStack.Depth-2].regex); }
        break;
      case 17: // inputPattern -> T_WORD
{ CurrentSemanticValue.regex = new WordWRegex(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 18: // inputPattern -> T_STAR
{ CurrentSemanticValue.regex = new RepetitionWRegex(new WildcardWRegex()); }
        break;
      case 19: // inputPattern -> T_PLUS
{ CurrentSemanticValue.regex =  new SequenceWRegex().Add(new WildcardWRegex()).Add(new RepetitionWRegex(new WildcardWRegex())); }
        break;
      case 20: // outputSeq -> outputSeq, output
{ ValueStack[ValueStack.Depth-2].outputList.Add(ValueStack[ValueStack.Depth-1].output); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 21: // outputSeq -> /* empty */
{ CurrentSemanticValue.outputList = new List<OutputStatement>(); }
        break;
      case 22: // output -> outputPattern
{ CurrentSemanticValue.output = new TemplateOutputStatement(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 23: // output -> call
{ CurrentSemanticValue.output = new CallOutputStatment(ValueStack[ValueStack.Depth-1].expr as FunctionCallExpr); }
        break;
      case 24: // Anon@1 -> /* empty */
{ ((ConfigScanner)Scanner).BEGIN(2); }
        break;
      case 25: // outputPattern -> T_COLON, Anon@1, T_OUTPUT
{ CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s.Trim(); }
        break;
      case 26: // call -> T_EXCL, T_CALL, exprReference, T_LPAR, exprSeq, T_RPAR
{ CurrentSemanticValue.expr = new FunctionCallExpr(ValueStack[ValueStack.Depth-4].s, ValueStack[ValueStack.Depth-2].exprList); }
        break;
      case 27: // exprSeq -> exprSeq, T_COMMA, expr
{ ValueStack[ValueStack.Depth-3].exprList.Add(ValueStack[ValueStack.Depth-1].expr); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 28: // exprSeq -> expr
{ CurrentSemanticValue.exprList = new List<Expression>(); CurrentSemanticValue.exprList.Add(ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 29: // expr -> exprIdentifier
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 30: // expr -> T_STRING
{ CurrentSemanticValue.expr = new ConstantValueExpr(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 31: // exprIdentifier -> exprReference
{ CurrentSemanticValue.expr = new IdentifierExpr(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 32: // exprReference -> exprReference, T_DOT, T_WORD
{ CurrentSemanticValue.s = ValueStack[ValueStack.Depth-3].s + "." + ValueStack[ValueStack.Depth-1].s; }
        break;
      case 33: // exprReference -> T_WORD
{ CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 34: // wordSeq -> wordSeq, T_COMMA, T_WORD
{ CurrentSemanticValue.stringList.Add(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 35: // wordSeq -> T_WORD
{ CurrentSemanticValue.stringList = new List<string>(); CurrentSemanticValue.stringList.Add(ValueStack[ValueStack.Depth-1].s); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
